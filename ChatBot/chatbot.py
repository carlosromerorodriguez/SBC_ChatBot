# -*- coding: utf-8 -*-
"""ProjecteSBC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n4TlkK0Ccx6KhGL6kRvLP5NI-eKDKUxU

Sistema de recomenacio basat en: en el preu (barat, ,car), clima, cultura, tipus de menjar, on est√† al mon (fora d'espanya, europa, usa...), tipus de turisme (platja, montanya, ciutat..) i idioma
"""

import nltk
from nltk.stem import PorterStemmer, LancasterStemmer, WordNetLemmatizer, SnowballStemmer
lemmatizer = WordNetLemmatizer()

from nltk.corpus import stopwords
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('wordnet')

import pandas as pd

import sklearn
from sklearn.feature_extraction.text import CountVectorizer

import sklearn
from sklearn import datasets, metrics, feature_extraction
from sklearn.feature_extraction.text import CountVectorizer
import sklearn.manifold

import glob
import codecs
import re
import gensim
import gensim.models.word2vec as w2v
import seaborn as sns
import scipy
import random

"""# **Base de coneixement**"""

cities_dataset = [
    {"city": "Lisbon", "country": "Portugal", "cost": "low", "climate": "warm", "culture": "traditional", "cuisine": "seafood", "tourism_type": "city", "language": "Portuguese", "rating": 72.44},
    {"city": "Krakow", "country": "Poland", "cost": "low", "climate": "cold", "culture": "traditional", "cuisine": "eastern european", "tourism_type": "city", "language": "Polish", "rating": 76.24},
    {"city": "Zurich", "country": "Switzerland", "cost": "high", "climate": "cold", "culture": "modern", "cuisine": "swiss", "tourism_type": "city", "language": "German", "rating": 64.83},
    {"city": "Paris", "country": "France", "cost": "high", "climate": "mild", "culture": "artistic", "cuisine": "french", "tourism_type": "city", "language": "French", "rating": 79.91},
    {"city": "Seville", "country": "Spain", "cost": "medium", "climate": "hot", "culture": "traditional", "cuisine": "spanish", "tourism_type": "city", "language": "Spanish", "rating": 77.77},
    {"city": "Cancun", "country": "Mexico", "cost": "medium", "climate": "hot", "culture": "traditional", "cuisine": "mexican", "tourism_type": "beach", "language": "Spanish", "rating": 83.21},
    {"city": "Tromso", "country": "Norway", "cost": "high", "climate": "cold", "culture": "natural", "cuisine": "norwegian", "tourism_type": "nature", "language": "Norwegian", "rating": 69.01},
    {"city": "Banff", "country": "Canada", "cost": "high", "climate": "cold", "culture": "modern", "cuisine": "canadian", "tourism_type": "nature", "language": "English", "rating": 70.87},
    {"city": "Kyoto", "country": "Japan", "cost": "high", "climate": "mild", "culture": "traditional", "cuisine": "japanese", "tourism_type": "city", "language": "Japanese", "rating": 74.36},
    {"city": "Cape Town", "country": "South Africa", "cost": "medium", "climate": "mild", "culture": "diversa", "cuisine": "south african", "tourism_type": "city", "language": "English", "rating": 68.91},
    {"city": "Bangkok", "country": "Thailand", "cost": "low", "climate": "hot", "culture": "traditional", "cuisine": "thai", "tourism_type": "city", "language": "Thai", "rating": 79.45},

    {"city": "Reykjavik", "country": "Iceland", "cost": "high", "climate": "cold", "culture": "nordic", "cuisine": "icelandic", "tourism_type": "nature", "language": "Icelandic", "rating": 75.06},
    {"city": "Sydney", "country": "Australia", "cost": "high", "climate": "warm", "culture": "contemporary", "cuisine": "australian", "tourism_type": "city", "language": "English", "rating": 74.20},
    {"city": "Venice", "country": "Italy", "cost": "high", "climate": "mild", "culture": "historical", "cuisine": "italian", "tourism_type": "city", "language": "Italian", "rating": 79.96},
    {"city": "Cairo", "country": "Egypt", "cost": "low", "climate": "hot", "culture": "ancient", "cuisine": "middle eastern", "tourism_type": "city", "language": "Arabic", "rating": 83.13},
    {"city": "Barcelona", "country": "Spain", "cost": "medium", "climate": "warm", "culture": "creative", "cuisine": "spanish", "tourism_type": "city", "language": "Spanish", "rating": 82.01},
    {"city": "Madrid", "country": "Spain", "cost": "medium", "climate": "mild", "culture": "cosmopolitan", "cuisine": "spanish", "tourism_type": "city", "language": "Spanish", "rating": 82.00},
    {"city": "Rio de Janeiro", "country": "Brazil", "cost": "medium", "climate": "warm", "culture": "festive", "cuisine": "brazilian", "tourism_type": "beach", "language": "Portuguese", "rating": 79.41},
    {"city": "Marrakech", "country": "Morocco", "cost": "low", "climate": "hot", "culture": "traditional", "cuisine": "moroccan", "tourism_type": "city", "language": "Arabic", "rating": 81.81},
    {"city": "Jaipur", "country": "India", "cost": "low", "climate": "hot", "culture": "historic", "cuisine": "indian", "tourism_type": "city", "language": "Hindi", "rating": 71.83},

    {"city": "San Francisco", "country": "USA", "cost": "high", "climate": "mild", "culture": "modern", "cuisine": "american", "tourism_type": "city", "language": "English", "rating": 76.19},
    {"city": "Athens", "country": "Greece", "cost": "medium", "climate": "warm", "culture": "historical", "cuisine": "greek", "tourism_type": "city", "language": "Greek", "rating": 79.92},
    {"city": "Hanoi", "country": "Vietnam", "cost": "low", "climate": "hot", "culture": "traditional", "cuisine": "vietnamese", "tourism_type": "city", "language": "Vietnamese", "rating": 81.29},
    {"city": "Istanbul", "country": "Turkey", "cost": "medium", "climate": "mild", "culture": "traditional", "cuisine": "turkish", "tourism_type": "city", "language": "Turkish", "rating": 84.48},
    {"city": "Las Vegas", "country": "USA", "cost": "high", "climate": "hot", "culture": "modern", "cuisine": "international", "tourism_type": "city", "language": "English", "rating": 72.01},
    {"city": "Dubai", "country": "UAE", "cost": "high", "climate": "hot", "culture": "modern", "cuisine": "international", "tourism_type": "city", "language": "Arabic", "rating": 77.22},
    {"city": "Amsterdam", "country": "Netherlands", "cost": "high", "climate": "mild", "culture": "liberal", "cuisine": "dutch", "tourism_type": "city", "language": "Dutch", "rating": 78.37},
    {"city": "Prague", "country": "Czech Republic", "cost": "medium", "climate": "cold", "culture": "historical", "cuisine": "czech", "tourism_type": "city", "language": "Czech", "rating": 79.12},
    {"city": "Buenos Aires", "country": "Argentina", "cost": "low", "climate": "mild", "culture": "historical", "cuisine": "argentinian", "tourism_type": "city", "language": "Spanish", "rating": 68.27},
    {"city": "Stockholm", "country": "Sweden", "cost": "high", "climate": "cold", "culture": "innovative", "cuisine": "swedish", "tourism_type": "city", "language": "Swedish", "rating": 70.73},
    {"city": "Copenhagen", "country": "Denmark", "cost": "high", "climate": "cold", "culture": "traditional", "cuisine": "danish", "tourism_type": "city", "language": "Danish", "rating": 75.28},

    {"city": "Beijing", "country": "China", "cost": "medium", "climate": "mild", "culture": "historical", "cuisine": "chinese", "tourism_type": "city", "language": "Mandarin", "rating": 77.39},
    {"city": "Moscow", "country": "Russia", "cost": "high", "climate": "cold", "culture": "historical", "cuisine": "russian", "tourism_type": "city", "language": "Russian", "rating": 78.12},
    {"city": "Osaka", "country": "Japan", "cost": "high", "climate": "mild", "culture": "historical", "cuisine": "japanese", "tourism_type": "city", "language": "Japanese", "rating": 80.89},
    {"city": "Melbourne", "country": "Australia", "cost": "high", "climate": "variable", "culture": "historical", "cuisine": "multicultural", "tourism_type": "city", "language": "English", "rating": 73.22},
    {"city": "Nairobi", "country": "Kenya", "cost": "low", "climate": "mild", "culture": "natural", "cuisine": "kenyan", "tourism_type": "nature", "language": "English", "rating": 73.08},
    {"city": "Budapest", "country": "Hungary", "cost": "low", "climate": "cold", "culture": "historical", "cuisine": "hungarian", "tourism_type": "city", "language": "Hungarian", "rating": 79.98},
    {"city": "Santiago", "country": "Chile", "cost": "medium", "climate": "mild", "culture": "historical", "cuisine": "chilean", "tourism_type": "city", "language": "Spanish", "rating": 69.96},
    {"city": "Havana", "country": "Cuba", "cost": "low", "climate": "hot", "culture": "musical", "cuisine": "cuban", "tourism_type": "city", "language": "Spanish", "rating": 79.12},
    {"city": "Kuala Lumpur", "country": "Malaysia", "cost": "low", "climate": "hot", "culture": "multicultural", "cuisine": "malaysian", "tourism_type": "city", "language": "Malay", "rating": 76.32},
    {"city": "Lima", "country": "Peru", "cost": "medium", "climate": "mild", "culture": "historical", "cuisine": "peruvian", "tourism_type": "city", "language": "Spanish", "rating": 82.78},

    {"city": "Vienna", "country": "Austria", "cost": "high", "climate": "cold", "culture": "cultural", "cuisine": "austrian", "tourism_type": "city", "language": "German", "rating": 76.99},
    {"city": "Montreal", "country": "Canada", "cost": "medium", "climate": "cold", "culture": "multicultural", "cuisine": "canadian", "tourism_type": "city", "language": "French", "rating": 74.54},
    {"city": "Auckland", "country": "New Zealand", "cost": "high", "climate": "mild", "culture": "indigenous", "cuisine": "new zealand", "tourism_type": "city", "language": "English", "rating": 71.37},
    {"city": "Cartagena", "country": "Colombia", "cost": "medium", "climate": "hot", "culture": "historical", "cuisine": "colombian", "tourism_type": "beach", "language": "Spanish", "rating": 83.11},
    {"city": "Salzburg", "country": "Austria", "cost": "medium", "climate": "cold", "culture": "cultural", "cuisine": "austrian", "tourism_type": "city", "language": "German", "rating": 73.55},
    {"city": "Chiang Mai", "country": "Thailand", "cost": "low", "climate": "mild", "culture": "festive", "cuisine": "thai", "tourism_type": "city", "language": "Thai", "rating": 79.65},
    {"city": "Edinburgh", "country": "United Kingdom", "cost": "medium", "climate": "cold", "culture": "historic", "cuisine": "british", "tourism_type": "city", "language": "English", "rating": 77.43},
    {"city": "Antigua Guatemala", "country": "Guatemala", "cost": "low", "climate": "mild", "culture": "colonial", "cuisine": "guatemalan", "tourism_type": "city", "language": "Spanish", "rating": 76.83},
    {"city": "Queenstown", "country": "New Zealand", "cost": "high", "climate": "variable", "culture": "adventure", "cuisine": "new zealand", "tourism_type": "nature", "language": "English", "rating": 76.09},
    {"city": "Luang Prabang", "country": "Laos", "cost": "low", "climate": "warm", "culture": "spiritual", "cuisine": "laotian", "tourism_type": "city", "language": "Lao", "rating": 80.11},

    {"city": "Valletta", "country": "Malta", "cost": "medium", "climate": "warm", "culture": "historical", "cuisine": "mediterranean", "tourism_type": "city", "language": "Maltese", "rating": 72.90},
    {"city": "Porto", "country": "Portugal", "cost": "low", "climate": "mild", "culture": "enological", "cuisine": "portuguese", "tourism_type": "city", "language": "Portuguese", "rating": 76.66}
]

"""# **Atributs**"""

types_dict = {
    "cost": ["low", "medium", "high"],
    "climate": ["warm", "cold", "mild", "hot", "variable"],
    "culture": ["traditional", "modern", "artistic", "natural", "nordic", "contemporary", "ancient", "creative", "cosmopolitan", "liberal", "innovative", "enological", "historical", "spiritual", "adventure", "colonial", "festive", "indigenous", "multicultural", "cultural", "musical"],
    "cuisine": ["seafood", "eastern european", "swiss", "french", "spanish", "mexican", "norwegian", "canadian", "japanese", "south african", "thai", "icelandic", "australian", "italian", "middle eastern", "brazilian", "moroccan", "indian", "american", "greek", "vietnamese", "turkish", "international", "dutch", "czech", "argentinian", "swedish", "danish", "chinese", "russian", "multicultural", "kenyan", "hungarian", "chilean", "cuban", "malaysian", "peruvian", "austrian", "new zealand", "colombian", "british", "guatemalan", "laotian", "mediterranean", "portuguese"],
    "tourism_type": ["city", "beach", "nature"],
    "language": ["Portuguese", "Polish", "German", "Spanish", "Norwegian", "English", "Japanese", "Thai", "Icelandic", "Italian", "Arabic", "Hindi", "Greek", "Vietnamese", "Turkish", "Dutch", "Czech", "Swedish", "Danish", "Mandarin", "Russian", "Hungarian", "Malay", "French", "Lao", "Maltese"],
    "rating": float
    }

"""# **Preguntes**"""

what_questions = [
    "What is the climate like in Paris?",
    "What cuisine is Lisbon known for?",
    "What language do they speak in Osaka?",
    "What are the main attractions in Paris?"
]

how_questions = [
    "How expensive is Spain?",
    "How do I get around in Lisbon?",
    "How expensive is Barcelona?"
]

where_questions = [
    "Where should I visit for rich cultural experiences?",
    "Where can I find the best seafood cuisine?",
    "Where to stay for a historical tour in Cartagena?"
]

when_questions = [
    "When is the best time to visit Seville?",
    "When are the cultural festivals in Seville?"
]

why_questions = [
    "Why visit Krakow?",
    "Why should I go to Zurich during winter?"
]

which_questions = [
    "Which city is best for beach tourism?",
    "Which is cheaper, Lisbon or Krakow?",
    "Which is the city with the most rating?",
    "Which city is the best to me?"
]

frases_por_tipo = [what_questions, how_questions, where_questions, when_questions, why_questions, which_questions]
frase_seleccionada_por_tipo = [random.choice(grupo) for grupo in frases_por_tipo]

"""# **Respostes**"""



"""# **'What' types of questions**"""

def show_climate_information(nouns):
    found = False
    for city_info in cities_dataset:
        if found:
            break
        for noun in nouns:
            if city_info['city'].lower() == noun.lower():
                frase = random.choice(frases).format(**city_info)
                print(frase)
                found = True
                break
    if not found:
        print("No climate information available for the specified location.")


def show_cuisine_information(tokens):
    city_found = False
    for city_info in cities_dataset:
        if any(city_info['city'].lower() == token.lower() for token in tokens):
            frase = random.choice(frases).format(**city_info)
            print(frase)
            city_found = True
            break

    if not city_found:
        print("Sorry, we don't have cuisine information for that location.")

def show_language_information(nouns):
    for city_info in cities_dataset:
        if city_info['city'].lower() in nouns:
            print(f"In {city_info['city'].title()} they speak {city_info['language'].title()}")
            break

"""# **'When' types of questions**"""

def get_best_times_to_visit_by_climate(climate):
    climate_to_times = {
        "warm": "late spring to early summer (May to July)",
        "cold": "summer (June to August)",
        "mild": "spring (April to June) and fall (September to November)",
        "hot": "early spring (April to June)",
        "variable": "spring and fall are generally good options"
    }
    return climate_to_times.get(climate, "varies, as detailed information is not available")

def show_best_times_to_visit(nouns):
    city_query = ' '.join(nouns)

    response_templates = [
        "Heading to {city}? The ideal period for your trip is {times}, when the weather is just perfect for exploring.",
        "If {city} is on your list, consider visiting during {times}. You‚Äôll find the climate quite agreeable.",
        "The {climate} climate of {city} makes {times} the best time to visit. Enjoy your trip!",
        "Looking to explore {city}? {times} offers the best weather conditions for your adventures.",
        "For a pleasant journey to {city}, aim for {times}. That‚Äôs when the climate is most favorable."
    ]

    city_found = False
    for city_info in cities_dataset:
        if any(noun.lower() == city_info["city"].lower() for noun in nouns):
            best_times = get_best_times_to_visit_by_climate(city_info["climate"])
            response = random.choice(response_templates).format(city=city_info['city'], times=best_times, climate=city_info['climate'])
            print(response)
            city_found = True
            break
    if not city_found:
        print("Sorry, we don't have information on the best time to visit that location.")

"""# **'Why' types of questions**"""

def show_reasons_to_visit_certain_places(nouns):
    city_found = False
    for city_info in cities_dataset:
        if any(noun.lower() == city_info['city'].lower() for noun in nouns):
            reasons = f"The reasons to visit {city_info['city']}: "
            reasons += f"Is known for its {city_info['culture']} culture, "
            reasons += f"you will enjoy its {city_info['climate']} climate, "
            reasons += f"enjoy its delicious {city_info['cuisine']} cuisine, "
            reasons += f"and explore its {city_info['tourism_type']} tourism. "
            reasons += f"Furthermore, the citizens here speak {city_info['language']}."

            print(reasons)
            city_found = True
            break

    if not city_found:
        print("There is no relevant information about the city you mention.")

"""# **'How' type of questions**"""

def reassemble_city_names(tags):
    city_names = []
    temp_name = []

    allowed_tags = ['NNP', 'NNPS', 'NN', 'NNS', 'IN', 'JJ', 'VBN']
    for token, tag in tags:
        if tag in allowed_tags:
            temp_name.append(token)
        else:
            if temp_name:
                city_names.append(" ".join(temp_name))
                temp_name = []
    if temp_name:
        city_names.append(" ".join(temp_name))

    return city_names


def show_cost_of_living(tags):
    city_or_country_names = reassemble_city_names(tags)
    adjectives = [token.lower() for token, tag in tags if tag == 'JJ']

    info_found = False
    city = False
    for info  in cities_dataset:
        for name in city_or_country_names:
            if info['city'].lower() == name.lower() or info['country'].lower() == name.lower():
                if info['city'].lower() == name.lower(): city = True
                if "expensive" in adjectives:
                    cost_level = info['cost']
                    if city: print(f"The cost of living in {name.title()}, {info['country'].title()} is considered {cost_level}.")
                    else: print(f"The cost of living in {name.title()} is considered {cost_level}.")
                    info_found = True
                    break
        if info_found:
            break

    if not info_found:
        print("Sorry, we don't have cost information for that location.")

"""# **'Where' type of questions**"""

def show_cultural_recommendations():
    rich_cultural_descriptors = [
        "traditional", "artistic", "ancient", "creative",
        "cosmopolitan", "historical", "spiritual", "colonial",
        "festive", "indigenous", "multicultural", "cultural", "musical"
    ]

    recommended_cities = [city['city'] for city in cities_dataset if any(descriptor in city['culture'].lower() for descriptor in rich_cultural_descriptors)]

    if recommended_cities:
        recommended_city = random.choice(recommended_cities)
        print(f"For rich cultural experiences, consider visiting {recommended_city}.")
    else:
        print("Sorry, we couldn't find a city recommendation for rich cultural experiences.")

def show_food_recommendations():
    # Filtrar ciudades por su oferta gastron√≥mica
    recommended_cities = [city for city in cities_dataset if city['cuisine'] in types_dict['cuisine']]

    if recommended_cities:
        city_info = random.choice(recommended_cities)
        frase = random.choice(frases).format(**city_info)
        print(frase)
    else:
        print("Sorry, we couldn't find a city recommendation for culinary experiences.")

def show_beach_recommendations():
    # Filtrar ciudades que ofrecen turismo de playa
    beach_cities = [city for city in cities_dataset if city['tourism_type'] == 'beach']

    if beach_cities:
        city_info = random.choice(beach_cities)
        frase = random.choice(frases).format(**city_info)
        print(frase)
    else:
        print("Sorry, we couldn't find a city recommendation for beach experiences.")

def show_historical_recommendations(city=None):
    historical_cities = [city for city in cities_dataset if 'historical' in city['culture'] or 'ancient' in city['culture']]
    if city:
        historical_cities = [c for c in historical_cities if c['city'].lower() == city.lower()]

    if historical_cities:
        city_info = random.choice(historical_cities)
        frase = random.choice(frases).format(**city_info)
        print(frase)
    else:
        print(f"Sorry, we couldn't find historical tour recommendations for {city}." if city else "Sorry, we couldn't find any city recommendation for historical experiences.")

"""# **Suggestion based on user's preferences**"""

def map_synonym_to_basic_value(word, key, types_dict_extended):
    synonym_to_value_map = {
        "cost": {
            "low": ["low", "cheap", "budget", "economical"],
            "medium": ["medium", "moderate", "reasonable"],
            "high": ["high", "expensive", "premium", "luxury"]
        },
        "climate": {
            "warm": ["warm", "hot", "sunny", "tropical"],
            "cold": ["cold", "chilly", "freezing", "polar"],
            "mild": ["mild", "temperate", "moderate"],
            "variable": ["variable", "changing", "unpredictable"]
        },
        "tourism_type": {
            "city": ["city", "urban", "metropolitan"],
            "beach": ["beach", "coastal", "seaside", "oceanic"],
            "nature": ["nature", "natural", "wildlife", "outdoors", "rural"]
        }
    }

    if key in synonym_to_value_map:
        for basic_value, synonyms in synonym_to_value_map[key].items():
            if word in synonyms:
                return basic_value
    else:
      if word in types_dict_extended[key]:
            return word
    return None


def is_response_understood(key, words, types_dict_extended):
    words_set = set(word.lower() for word in words)

    for word in words_set:
        basic_value = map_synonym_to_basic_value(word, key, types_dict_extended)
        if basic_value:
            return True, basic_value
    return False, None


def suggest(verbs_passed, nouns_passed, adjectives_passed, adverbs_passed):
    types_dict_extended = {
        "cost": ["low", "cheap", "budget", "economical", "medium", "moderate", "reasonable", "high", "expensive",
                 "premium", "luxury"],
        "climate": ["warm", "hot", "sunny", "tropical", "cold", "chilly", "freezing", "polar", "mild", "temperate",
                    "moderate", "variable", "changing", "unpredictable"],
        "culture": ["traditional", "modern", "artistic", "natural", "nordic", "contemporary", "ancient", "creative",
                    "cosmopolitan", "liberal", "innovative", "enological", "historical", "spiritual", "adventure",
                    "colonial", "festive", "indigenous", "multicultural", "cultural", "musical"],
        "cuisine": ["seafood", "eastern european", "swiss", "french", "spanish", "mexican", "norwegian", "canadian",
                    "japanese", "south african", "thai", "icelandic", "australian", "italian", "middle eastern",
                    "brazilian", "moroccan", "indian", "american", "greek", "vietnamese", "turkish", "international",
                    "dutch", "czech", "argentinian", "swedish", "danish", "chinese", "russian", "multicultural",
                    "kenyan", "hungarian", "chilean", "cuban", "malaysian", "peruvian", "austrian", "new zealand",
                    "colombian", "british", "guatemalan", "laotian", "mediterranean", "portuguese"],
        "tourism_type": ["city", "urban", "metropolitan", "beach", "coastal", "seaside", "oceanic", "nature", "natural",
                         "wildlife", "outdoors", "rural"],
        "language": ["portuguese", "polish", "german", "spanish", "norwegian", "english", "japanese", "thai",
                     "icelandic", "italian", "arabic", "hindi", "greek", "vietnamese", "turkish", "dutch", "czech",
                     "swedish", "danish", "mandarin", "russian", "hungarian", "malay", "french", "lao", "maltese"]
    }

    preferences = {}
    already_done = set()
    all_passed = set(nouns_passed + verbs_passed + adjectives_passed + adverbs_passed)

    for key in types_dict_extended.keys():
        filtered_words = [word for word in all_passed if word != "city"]  # Treiem city ja que forma part de la pregunta
        for word in filtered_words:
            understood, lemma = is_response_understood(key, all_passed, types_dict_extended)
            if understood and key not in already_done:
                preferences[key] = lemma
                already_done.add(key)

    lemmatizer = WordNetLemmatizer()

    questions = {
        "climate": [
            "What type of climate do you prefer?",
            "Do you enjoy cold weather, or do you prefer it warm?",
            "Would you rather visit a place with a warm climate or a cooler one?"
        ],
        "cost": [
            "What's your budget like?",
            "Are you looking for somewhere budget-friendly, or is cost not a concern?",
            "Would you prefer a low-cost, medium-cost, or high-cost destination?"
        ],
        "culture": [
            "Do you prefer a city with a traditional or modern culture?",
            "Are you more interested in traditional cultures or modern vibes?",
            "Would a traditional cultural setting or a more modern scene suit you better?"
        ],
        "cuisine": [
            "What's your preferred type of cuisine?",
            "Are there any particular types of food you enjoy?",
            "Do you have a preference for any specific cuisine style?"
        ],
        "tourism_type": [
            "What type of tourism are you interested in?",
            "Do you prefer city life, natural landscapes, or beach settings?",
            "Are you looking for an urban, natural, or beachside experience?"
        ],
        "language": [
            "Do you have any language preferences?",
            "Is there a particular language you'd prefer to use?",
            "Would you prefer to visit a place where a specific language is spoken?"
        ]
    }

    more_preferences_questions = [
        "Do you have any more preferences?",
        "Is there anything else you're looking for in a destination?",
        "Would you like to add more preferences?",
        "Any other specific preferences to consider?",
        "Would you like to specify any additional preferences?",
        "Do you have more criteria for your ideal destination?"
    ]

    misunderstood_responses = [
        "I'm not sure I understood that. Could you say it in a different way?",
        "Sorry, could you clarify that?",
        "I didn't catch that. Can you provide more detail or rephrase?",
        "Hmm, I'm having trouble understanding. Could you rephrase your preference?",
        "Apologies, but I didn't get that. Could you express it differently?",
        "I'm struggling to understand that. Could you simplify your response?",
        "My apologies, I'm not quite following. Could you elaborate a bit more?",
        "I must admit, I'm a bit confused. Could you provide more specifics?",
        "I'm having a bit of difficulty understanding you. Can you say it differently?",
    ]

    affirmative_responses = ["yes", "yeah", "sure", "of course", "absolutely", "yep"]
    negative_responses = ["no", "not really", "nope", "nah", "don't", "do not"]

    questions_keys = questions.keys()  # Les diferents keys de les preguntes

    for key, question_list in questions.items():
        if key in already_done:
            continue

        while True:
            question = random.choice(question_list)
            print(question)

            # response √©s la resposta del usuari
            response = input("> ")

            # Processem la resposta del usuari
            words = nltk.word_tokenize(response)
            tags = nltk.pos_tag(words)

            nouns = [token for token, pos in tags if pos.startswith('N')]
            verbs = [token for token, pos in tags if pos.startswith('V')]
            adjectives = [token for token, pos in tags if pos.startswith('J')]

            verbs_lemm = [lemmatizer.lemmatize(verb, pos="v") for verb in verbs]
            nouns_lemm = [lemmatizer.lemmatize(noun, pos="n") for noun in nouns]
            adjectives_lemm = [lemmatizer.lemmatize(adjective, pos="a") for adjective in adjectives]

            understood = True  # Variable per si hem ent√©s la resposta

            # Comprovem si hem entes la resposta i agafem el valor que coincideix
            understood, lemma = is_response_understood(key, nouns_lemm + verbs_lemm + adjectives_lemm,
                                                       types_dict_extended)

            if understood:
                preferences[key] = lemma  # Actualitzem les preferencies en base al atribut que coincideix
                break
            else:
                print(random.choice(misunderstood_responses))

        while True:
            if len(preferences) >= len(questions_keys):  # SI ja tenim tots els atributs no cal preguntar m√©s
                return preferences

            more_question = random.choice(more_preferences_questions)
            print(more_question)  # Preguntem si t√© m√©s preferencies

            # more aqui √©s la resposta del usuari
            more = input("> ")

            # Processem la resposta del usuari
            if more.lower() in affirmative_responses:
                break  # Si te m√©s preferencies
            elif more.lower() in negative_responses:
                return preferences  # Si no te m√©s preferencies retornem el que tenim
            else:  # No hem entes i per tant tornem a preguntar
                print(random.choice(misunderstood_responses))

""" Per implementacions futures """
def cities_rating():
    sorted_cities = sorted(cities_dataset, key=lambda x: x['rating'], reverse=True)
    print("The best place to visit for you is", sorted_cities[0])
    return sorted_cities


suggest_questions = [
    "Suggest me a city with a warm climate", 
    "Can you suggest a city with a low cost of living?",
]

def suggest_city(preferences):
    affirmative_responses = ["yes", "yeah", "sure", "of course", "absolutely", "yep"]
    negative_responses = ["no", "not really", "nope", "nah", "don't", "do not"]

    matching_cities = [city for city in cities_dataset if all(city[attr] == val for attr, val in preferences.items())]

    if not matching_cities:
        print("I'm sorry, but we couldn't find any cities that match your preferences.")
        return

    another_city_prompts = [
        "Would you like to see another city that matches your preferences?: ",
        "Are you interested in exploring another matching city?: ",
        "Do you want to check out another city like this one?: ",
        "Would you like me to suggest another city?: ",
        "Interested in seeing more cities?: "
    ]

    while matching_cities:
        selected_city = random.choice(matching_cities)
        phrase = random.choice(frases)
        phrase_filled = phrase.format(**selected_city)
        print(phrase_filled+"\n")
        matching_cities.remove(selected_city)

        if len(matching_cities) == 0:
            print("There are no more cities that match your preferences.")
            break

        user_response = input(random.choice(another_city_prompts)).lower()
        if user_response in negative_responses or not any(
                resp for resp in affirmative_responses if resp in user_response):
            break

"""# **Main**"""

print("Hello! Welcome to Exploryst, the tourism assistance chatbot. You can ask me about weather, food, tourist attractions, and more.")

"""# **Main Loop**"""

exit_responses = ["bye", "goodbye", "see you soon", "see you later", "take care", "farewell", "catch you later", "I'm off", "exit", "leaving"]
hello_responses = ["hello", "hi", "hey", "good morning", "good afternoon", "good evening", "hey there", "hiya", "howdy", "greetings", "what's up", "sup",
    "how are you", "how's it going", "yo", "hi there", "hey there", "hello there", "what's happening", "what's new", "how's everything", "how's life", "how are things"]

greeting_responses = [
    "Hello, what can I help you with?",
    "Hi there! How can I assist you today?",
    "Hello! What do you need help with?",
    "Greetings! How may I help you?",
    "Hi! What can I do for you?",
    "Hello! How can I assist you today?"
]

not_understood_responses = [
    "I'm sorry, I didn't catch that. Could you phrase it differently, please?",
    "I'm afraid I don't understand. Could you be more specific?",
    "I'm not sure what you're asking for. Could you give me more details?",
    "Could you explain that a bit more? I'm not sure I got everything.",
    "Sorry, I didn't understand what you meant. Could you try again?",
    "Hmm, I'm a bit confused by that. Could you say it another way?",
    "Apologies, but I couldn't process that properly. Could you repeat it?",
    "I'm not sure I understood that correctly. Could you clarify, please?",
    "That's a bit beyond me. Could you help me understand better?",
    "Excuse me, I didn't get that. Could you try explaining in a different way?"
]

while True:
    user_question = input("> ")
    if user_question.lower() in exit_responses:
        print("Thanks for using Exploryst. See you soon!")
        break

    if user_question.lower() in hello_responses:
        print(random.choice(greeting_responses))
        continue

    words = nltk.word_tokenize(user_question.lower())
    tags = nltk.pos_tag(words)

    nouns = [token for token, pos in tags if pos.startswith('N')]
    verbs = [token for token, pos in tags if pos.startswith('V')]
    adverbs = [token for token, pos in tags if pos.startswith('W')]
    adjectives = [token for token, pos in tags if pos.startswith('J')]

    #Lemmatize
    verbs_lemm = [lemmatizer.lemmatize(verb, pos="v") for verb in verbs]
    nouns_lemm = [lemmatizer.lemmatize(noun, pos="n") for noun in nouns]
    adjectives_lemm = [lemmatizer.lemmatize(adjective, pos="a") for adjective in adjectives]
    adverbs_lemm = [lemmatizer.lemmatize(adverb, pos="r") for adverb in adverbs]

    if 'what' in adverbs:
        if 'climate' in nouns:
            show_climate_information(nouns)
        elif 'eat' in verbs_lemm or 'cuisine' in nouns:
            show_cuisine_information(nouns + adjectives)
        elif 'see' in verbs_lemm or 'visit' in verbs_lemm or 'attractions' in nouns: #TODO WITH API
            # show_tourist_attractions(nouns)   Atracciones tur√≠sticas recomendadas
            print("Tourist")
        elif 'language' in nouns:
            show_language_information(nouns)
        else:
          print(random.choice(not_understood_responses))

    elif 'where' in adverbs:
        # Ens guardem el primer atribut
        # Bucle de preguntes i suggriment
        if "cultural" in words:
            show_cultural_recommendations()
        elif "food" in words or "cuisine" in words:
            show_food_recommendations()
        elif "beach" in words:
            show_beach_recommendations()
        elif "historical" in words:
            city_name = None
            for i, (token, tag) in enumerate(tags):
                if token == 'in' and i+1 < len(tags):
                    city_name = tags[i+1][0]
                    break

            show_historical_recommendations(city_name)
        else:
            print("Can you specify what kind of places or experiences you're interested in?")

    elif 'suggest' in verbs:
        # Bucle de preguntes i suggriment
        suggest_city(suggest(verbs_lemm, nouns_lemm, adjectives_lemm, adverbs_lemm))

    elif 'when' in adverbs: # En base al climate
        if 'visit' in words or 'go' in words:
            show_best_times_to_visit(nouns)  # Los mejores momentos para visitar ciudades basadas en clima
        else:
          print(random.choice(not_understood_responses))

    elif 'why' in adverbs:
        if 'visit' in words or 'go' in words:
            show_reasons_to_visit_certain_places(nouns)  # Razones para visitar lugares espec√≠ficos
        else:
          print(random.choice(not_understood_responses))

    elif 'which' in adverbs:
        # Bucle de preguntes i suggriment
        suggest_city(suggest(verbs_lemm, nouns_lemm, adjectives_lemm, adverbs_lemm))

    elif 'how' in adverbs:
      if 'expensive' in adjectives:
            show_cost_of_living(tags)
      elif 'get around' in ' '.join(words) or 'transport' in words: #TODO
            # show_transport_options(nouns)
            print("Transport")
      else:
          print(random.choice(not_understood_responses))

    else:
        print(random.choice(not_understood_responses))

    print()


# When is the best time to visit Seville?

# Why visit Krakow?

# How expensive is Spain?

# How expensive is Barcelona?

# What language do they speak in Osaka?

# Which city is best for beach tourism?



what_questions = [
    "What is the climate like in Paris?",
    "What cuisine is Lisbon known for?",
    "What language do they speak in Osaka?",
]

how_questions = [
    "How expensive is Spain?",
    "How expensive is Barcelona?"
]

where_questions = [
    "Where should I visit for rich cultural experiences?",
    "Where can I find the best seafood cuisine?",
]

when_questions = [
    "When is the best time to visit Seville?",
]

why_questions = [
    "Why visit Krakow?",
    "Why should I go to Zurich during winter?"
]

which_questions = [
    "Which city is best for beach tourism?",
    "Which city is the best to me?"
]

suggest_questions = [
    "Suggest me a city with a warm climate", 
    "Can you suggest a city with a low cost of living?",
]